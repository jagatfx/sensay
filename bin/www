#!/usr/bin/env node

/**
 * Module dependencies.
 */
var express = require('express');
var app     = express();
var debug   = require('debug')('sensay:server');
var http    = require('http');
var toneAnalyzerService = require('../services/toneAnalyzerService');

var Tone    = require('../models/tone');

var server = http.createServer(app);
var io     = require('socket.io')(server);

app = require('../app')(app, io);
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

io.on('connection', function(socket) {
  console.log('a user connected');
  var tonesToRet = 10;
  Tone.find()
  .sort({createdAt: -1})
  .limit(tonesToRet)
  .exec(function(err, tones) {
    if (err) {
      console.error(err);
    }
    socket.emit('tones', tones);
  });
  // socket.on('chat message', function(msg) {
  //   io.emit('chat message', msg);
  // });
  socket.on('disconnect', function() {
    console.log('user disconnected');
  });

  socket.on('supportRequest', function(data) {
    toneAnalyzerService(io, data, function(err, data) {
      if(err) {
        console.log(err)
      }

    })
  });

  socket.on('supportResponse', function(data) {
    toneAnalyzerService(io, data, function(err, data) {
      if(err) {
        console.log(err)
      }
      else {
        socket.emit('supportResponse', data)
      }
    })
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
